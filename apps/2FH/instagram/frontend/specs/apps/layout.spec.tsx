import '@testing-library/jest-dom';
import { render } from '@testing-library/react';
import RootLayout, { metadata } from '../../src/app/layout';

jest.mock('../../src/components/providers', () => ({
  ApolloWrapper: ({ children }: { children: React.ReactNode }) => (
    <div data-testid="apollo-wrapper">{children}</div>
  ),
}));

describe('RootLayout', () => {
  beforeAll(() => {
    const originalError = console.error;
    console.error = (...args: unknown[]) => {
      if (typeof args[0] === 'string' && args[0].includes('validateDOMNesting')) {
        return;
      }
      originalError.call(console, ...args);
    };
  });

  it('should render successfully with children', () => {
    const TestChild = () => <div data-testid="test-child">Test Content</div>;
    
    const { container } = render(
      <RootLayout>
        <TestChild />
      </RootLayout>
    );

    expect(container.querySelector('html')).toBeTruthy();
    expect(container.querySelector('body')).toBeTruthy();
    expect(container.querySelector('[data-testid="apollo-wrapper"]')).toBeTruthy();
    expect(container.querySelector('[data-testid="test-child"]')).toBeTruthy();
  });

  it('should wrap children with ApolloWrapper', () => {
    const TestChild = () => <div data-testid="test-child">Test Content</div>;
    
    render(
      <RootLayout>
        <TestChild />
      </RootLayout>
    );

    expect(document.querySelector('[data-testid="apollo-wrapper"]')).toBeTruthy();
    expect(document.querySelector('[data-testid="test-child"]')).toBeTruthy();
  });

  it('should have correct html lang attribute', () => {
    const TestChild = () => <div>Test</div>;
    
    const { container } = render(
      <RootLayout>
        <TestChild />
      </RootLayout>
    );

    const htmlElement = container.querySelector('html');
    expect(htmlElement).toHaveAttribute('lang', 'en');
  });

  it('should render without errors when no children provided', () => {
    expect(() => render(<RootLayout />)).not.toThrow();
  });

  it('should maintain proper HTML structure', () => {
    const TestChild = () => <div data-testid="content">Content</div>;
    
    const { container } = render(
      <RootLayout>
        <TestChild />
      </RootLayout>
    );

    const html = container.querySelector('html');
    const body = container.querySelector('body');
    
    expect(html).toBeTruthy();
    expect(body).toBeTruthy();
    expect(body?.parentElement).toBe(html);
  });

  it('should test layout metadata properties', () => {
    expect(metadata.title).toBe('Welcome to example-frontend');
    expect(metadata.description).toBe('Generated by create-nx-workspace');
  });
});
