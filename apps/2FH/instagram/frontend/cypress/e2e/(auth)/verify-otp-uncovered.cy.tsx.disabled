// //describe('Verify OTP Page - Coverage for Uncovered Lines', () => {
//   const testEmail = 'test@example.com';

//   beforeEach(() => {
//     const testEmailEncoded = encodeURIComponent(testEmail);
//     cy.visit(`/verify-otp?email=${testEmailEncoded}`);
//   });

//   // Test for the timeout cleanup in useEffect (lines 61-62)
//   it('should cleanup timeout when component unmounts during cooldown', () => {
//     // First trigger resend to start cooldown
//     cy.interceptGraphql({
//       operationName: 'SendVerificationEmail',
//       state: 'success',
//       data: {
//         data: { sendVerificationEmail: true }
//       }
//     });

//     cy.contains('Resend verification code').click();
//     cy.wait('@SendVerificationEmail');
//     cy.contains('Resend in 60s').should('be.visible');

//     // Navigate away to trigger component unmount during cooldown
//     cy.get('a[href="/signup"]').click();
//     cy.url().should('include', '/signup');
//   });

//   // Test for the early return in useEffect when resendCooldown is 0 (lines 65-66)
//   it('should handle initial render when cooldown is 0', () => {
//     // This tests the early return when resendCooldown <= 0
//     cy.contains('Resend verification code').should('be.visible');
//     cy.contains('Resend verification code').should('not.be.disabled');
    
//     // Verify no countdown timer is shown initially
//     cy.contains(/Resend in \d+s/).should('not.exist');
//   });

//   // Additional test to cover the exact uncovered lines in the useEffect
//   it('should trigger useEffect cleanup on component unmount with active timer', () => {
//     // Mock a successful resend to start cooldown
//     cy.interceptGraphql({
//       operationName: 'SendVerificationEmail',
//       state: 'success',
//       data: {
//         data: { sendVerificationEmail: true }
//       }
//     });

//     // Click resend to start the cooldown timer (this triggers the useEffect with resendCooldown > 0)
//     cy.contains('Resend verification code').click();
//     cy.wait('@SendVerificationEmail');
    
//     // Verify the timer is active
//     cy.contains(/Resend in \d+s/).should('be.visible');
    
//     // Wait a bit to ensure the setTimeout is created
//     cy.wait(500);
    
//     // Navigate away immediately to trigger cleanup (lines 61-62)
//     cy.get('a[href="/signup"]').click();
//     cy.url().should('include', '/signup');
//   });

//   // Test to hit the specific condition in useEffect return (lines 65-66)
//   it('should handle useEffect when resendCooldown is exactly 0', () => {
//     // Start with a resend to set up state
//     cy.interceptGraphql({
//       operationName: 'SendVerificationEmail',
//       state: 'success',
//       data: {
//         data: { sendVerificationEmail: true }
//       }
//     });

//     cy.contains('Resend verification code').click();
//     cy.wait('@SendVerificationEmail');
    
//     // Wait for cooldown to reach exactly 0 (lines 65-66 should execute)
//     cy.contains('Resend verification code', { timeout: 65000 }).should('be.visible');
//     cy.contains('Resend verification code').should('not.be.disabled');
//   });

//   // Test edge case: rapid navigation that might cause race conditions
//   it('should handle rapid navigation during operations', () => {
//     // Start a resend operation
//     cy.intercept('POST', '**/graphql', (req) => {
//       if (req.body.operationName === 'SendVerificationEmail') {
//         req.reply({
//           delay: 2000, // Add delay to simulate network latency
//           statusCode: 200,
//           body: {
//             data: { sendVerificationEmail: true }
//           }
//         });
//       }
//     }).as('SlowSendVerificationEmail');

//     cy.contains('Resend verification code').click();
    
//     // Navigate away quickly before the request completes
//     cy.get('a[href="/signup"]').click();
//     cy.url().should('include', '/signup');
//   });

//   // Test the cleanup path more explicitly
//   it('should handle component lifecycle correctly', () => {
//     cy.interceptGraphql({
//       operationName: 'SendVerificationEmail',
//       state: 'success',
//       data: {
//         data: { sendVerificationEmail: true }
//       }
//     });

//     // Trigger resend to start the timer
//     cy.contains('Resend verification code').click();
//     cy.wait('@SendVerificationEmail');
    
//     // Verify timer is running
//     cy.contains('Resend in 60s').should('be.visible');
    
//     // Wait a moment to ensure timer is active
//     cy.wait(100);
    
//     // Navigate to a different page to unmount component
//     cy.visit('/signup');
//     cy.url().should('include', '/signup');
    
//     // Navigate back to verify-otp with same email
//     const testEmailEncoded = encodeURIComponent(testEmail);
//     cy.visit(`/verify-otp?email=${testEmailEncoded}`);
    
//     // Should be back to normal state (no cooldown from previous instance)
//     cy.contains('Resend verification code').should('be.visible');
//     cy.contains('Resend verification code').should('not.be.disabled');
//   }); 
// // });