# Combined GraphQL Schema for Tinder Backend

scalar JSON
scalar Date
scalar DateTime

enum Response {
  Success
}

enum Gender {
  male
  female
  both
}

enum ProfileResponse {
  SUCCESS
  ERROR
}

enum SwipeAction {
  LIKE
  DISLIKE
  SUPER_LIKE
}

enum SwipeResponse {
  SUCCESS
  ERROR
  ALREADY_SWIPED
  MATCH_CREATED
  NO_MORE_PROFILES
}

enum UserResponse {
  SUCCESS
  ERROR
}

enum PasswordResetResponse {
  SUCCESS
  ERROR
}

type User {
  id: ID!
  email: String!
  password: String!
  createdAt: String!
  updatedAt: String!
}

type LikeProfile {
  id: ID!
  userId: ID!
  name: String!
  bio: String!
  interests: [String!]!
  profession: String!
  work: String!
  images: [String!]!
  dateOfBirth: String!
}

type MatchProfile {
  id: ID!
  userId: ID!
  name: String!
  bio: String!
  interests: [String!]!
  profession: String!
  work: String!
  images: [String!]!
  dateOfBirth: String!
}

type Profile {
  id: ID!
  userId: ID!
  name: String!
  gender: Gender!
  interestedIn: Gender!
  bio: String!
  interests: [String!]!
  profession: String!
  work: String!
  images: [String!]!
  dateOfBirth: String!
  createdAt: DateTime!
  updatedAt: DateTime!
  likes: [LikeProfile!]!
  matches: [MatchProfile!]!
}

type Message {
  id: ID!
  sender: User
  receiver: User
  content: String!
  createdAt: String!
}

type Conversation {
  user: User!
  profile: Profile!
  messages: [Message!]!
}

type Match {
  id: ID!
  likeduserId: Profile!
  matcheduserId: Profile!
  matchedAt: Date!
}

type Swipe {
  id: ID!
  swiperId: ID!
  targetId: ID!
  action: SwipeAction!
  swipedAt: Date!
}

type SwipeResult {
  success: Boolean!
  message: String!
  response: SwipeResponse!
  match: Match
  nextProfile: Profile
}

type LoginResponse {
  status: UserResponse!
  message: String
  token: String
  user: User
}

type ForgotPasswordResponse {
  status: PasswordResetResponse!
  message: String
}

type VerifyOtpResponse {
  status: PasswordResetResponse!
  message: String
}

type ResetPasswordResponse {
  status: PasswordResetResponse!
  message: String
}

# Input Types
input CreateUserInput {
  email: String!
  password: String!
}

input UpdateUserInput {
  email: String
  password: String
}

input CreateProfileInput {
  userId: ID!
  name: String!
  gender: Gender!
  interestedIn: Gender!
  bio: String!
  interests: [String!]!
  profession: String!
  work: String
  images: [String!]!
  dateOfBirth: String!
}

input UpdateProfileInput {
  userId: ID!
  name: String
  gender: Gender
  interestedIn: Gender
  bio: String
  interests: [String!]
  profession: String
  work: String
  images: [String!]
  dateOfBirth: String
}

input CreateMatchInput {
  likeduserId: ID!
  matcheduserId: ID!
}

input SwipeInput {
  swiperId: ID!
  targetId: ID!
  action: SwipeAction!
}

input SendMessageInput {
  senderId: ID!
  receiverId: ID!
  content: String!
}

input ForgotPasswordInput {
  email: String!
}

input VerifyOtpInput {
  email: String!
  otp: String!
}

input ResetPasswordInput {
  email: String!
  newPassword: String!
}

# Query Types
type Query {
  sampleQuery: String!
  users: [User!]!
  user(id: ID!): User
  getProfile(userId: ID!): Profile!
  getAllProfiles: [Profile!]!
  getSwipe(userId: ID!): Profile
  getMessages(senderId: ID, receiverId: ID): [Message!]!
  getMessage(id: ID!): Message!
  getConversations(userId: ID!): [Conversation!]!
  getMessagesBetweenUsers(userId1: ID!, userId2: ID!): [Message!]!
  matches(userId: ID!): [Match!]!
}

# Mutation Types
type Mutation {
  sampleMutation: String!
  createUser(input: CreateUserInput!): UserResponse!
  updateUser(id: ID!, input: UpdateUserInput!): UserResponse!
  deleteUser(id: ID!): UserResponse!
  login(email: String!, password: String!): LoginResponse
  createProfile(input: CreateProfileInput!): ProfileResponse!
  updateProfile(input: UpdateProfileInput!): ProfileResponse!
  matchProfiles(userId: ID!, targetUserId: ID!): ProfileResponse!
  swipe(input: SwipeInput!): SwipeResult!
  undoLastSwipe(userId: ID!): SwipeResponse!
  createMatch(input: CreateMatchInput!): Match!
  sendMessage(input: SendMessageInput!): Message!
  forgotPassword(input: ForgotPasswordInput!): ForgotPasswordResponse
  verifyOtp(input: VerifyOtpInput!): VerifyOtpResponse
  resetPassword(input: ResetPasswordInput!): ResetPasswordResponse
}