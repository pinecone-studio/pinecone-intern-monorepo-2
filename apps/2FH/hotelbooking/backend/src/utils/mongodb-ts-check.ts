import mongoose from 'mongoose';
import { UserModel } from '../models/user.model';

// MongoDB —Ö–æ–ª–±–æ–ª—Ç —ç—Ö–ª“Ø“Ø–ª—ç—Ö
const connectToMongoDB = async () => {
  try {
    console.log('üîå MongoDB —Ö–æ–ª–±–æ–ª—Ç —ç—Ö–ª“Ø“Ø–ª–∂ –±–∞–π–Ω–∞...');
    
    if (mongoose.connection.readyState === 1) {
      console.log('‚úÖ MongoDB —Ö–æ–ª–±–æ–≥–¥—Å–æ–Ω –±–∞–π–Ω–∞');
      return true;
    }

    const mongoUri = process.env.MONGO_URI;
    if (!mongoUri) {
      throw new Error('MONGO_URI environment variable —Ç–æ–≥—Ç–æ–æ–≥–¥–æ–æ–≥“Ø–π –±–∞–π–Ω–∞');
    }

    await mongoose.connect(mongoUri);
    console.log('‚úÖ MongoDB —Ö–æ–ª–±–æ–ª—Ç –∞–º–∂–∏–ª—Ç—Ç–∞–π');
    return true;

  } catch (error) {
    console.error('‚ùå MongoDB —Ö–æ–ª–±–æ–ª—Ç –∞–º–∂–∏–ª—Ç–≥“Ø–π:', error);
    return false;
  }
};

// MongoDB —à–∞–ª–≥–∞—Ö —Ñ—É–Ω–∫—Ü
export const checkMongoDBStatus = async () => {
  try {
    console.log('üîç MongoDB —Å—Ç–∞—Ç—É—Å —à–∞–ª–≥–∞–∂ –±–∞–π–Ω–∞...\n');

    // 1. Environment variables —à–∞–ª–≥–∞—Ö
    console.log('1. Environment variables —à–∞–ª–≥–∞–∂ –±–∞–π–Ω–∞...');
    const mongoUri = process.env.MONGO_URI;
    console.log('MONGO_URI:', mongoUri ? '–¢–æ–≥—Ç–æ–æ—Å–æ–Ω' : '–¢–æ–≥—Ç–æ–æ–≥–¥–æ–æ–≥“Ø–π');

    if (!mongoUri) {
      return {
        success: false,
        issue: 'MONGO_URI –±–∞–π—Ö–≥“Ø–π',
        message: 'MONGO_URI environment variable —Ç–æ–≥—Ç–æ–æ–≥–¥–æ–æ–≥“Ø–π –±–∞–π–Ω–∞'
      };
    }

    // 2. Database —Ö–æ–ª–±–æ–ª—Ç —ç—Ö–ª“Ø“Ø–ª—ç—Ö
    console.log('\n2. Database —Ö–æ–ª–±–æ–ª—Ç —ç—Ö–ª“Ø“Ø–ª–∂ –±–∞–π–Ω–∞...');
    const connected = await connectToMongoDB();
    
    if (!connected) {
      return {
        success: false,
        issue: 'Database —Ö–æ–ª–±–æ–≥–¥–æ–æ–≥“Ø–π',
        message: 'Database —Ö–æ–ª–±–æ–≥–¥–æ—Ö–≥“Ø–π –±–∞–π–Ω–∞'
      };
    }

    // 3. Database —Ö–æ–ª–±–æ–ª—Ç —à–∞–ª–≥–∞—Ö
    console.log('\n3. Database —Ö–æ–ª–±–æ–ª—Ç —à–∞–ª–≥–∞–∂ –±–∞–π–Ω–∞...');
    const connectionState = mongoose.connection.readyState;
    const stateNames: Record<number, string> = {
      0: '—Ö–æ–ª–±–æ–≥–¥–æ–æ–≥“Ø–π',
      1: '—Ö–æ–ª–±–æ–≥–¥—Å–æ–Ω',
      2: '—Ö–æ–ª–±–æ–≥–¥–æ–∂ –±–∞–π–Ω–∞',
      3: '—Ö–æ–ª–±–æ–ª—Ç —Ç–∞—Å–∞—Ä—á –±–∞–π–Ω–∞'
    };

    console.log('–•–æ–ª–±–æ–ª—Ç—ã–Ω —Ç”©–ª”©–≤:', stateNames[connectionState] || '“Ø–ª –º—ç–¥—ç–≥–¥—ç—Ö');

    if (connectionState !== 1) {
      return {
        success: false,
        issue: 'Database —Ö–æ–ª–±–æ–≥–¥–æ–æ–≥“Ø–π',
        message: 'Database —Ö–æ–ª–±–æ–≥–¥–æ–æ–≥“Ø–π –±–∞–π–Ω–∞',
        connectionState: stateNames[connectionState] || '“Ø–ª –º—ç–¥—ç–≥–¥—ç—Ö'
      };
    }

    console.log('‚úÖ Database —Ö–æ–ª–±–æ–≥–¥—Å–æ–Ω');

    // 4. Database –º—ç–¥—ç—ç–ª—ç–ª
    console.log('\n4. Database –º—ç–¥—ç—ç–ª—ç–ª...');
    const dbName = mongoose.connection.db.databaseName;
    const host = mongoose.connection.host;
    const port = mongoose.connection.port;

    console.log('Database –Ω—ç—Ä:', dbName);
    console.log('Host:', host);
    console.log('Port:', port);

    // 5. Collections —à–∞–ª–≥–∞—Ö
    console.log('\n5. Collections —à–∞–ª–≥–∞–∂ –±–∞–π–Ω–∞...');
    const collections = await mongoose.connection.db.listCollections().toArray();
    console.log('–ë–æ–ª–æ–º–∂—Ç–æ–π collections:', collections.map(col => col.name));

    // 6. Users collection —à–∞–ª–≥–∞—Ö
    console.log('\n6. Users collection —à–∞–ª–≥–∞–∂ –±–∞–π–Ω–∞...');
    const userCount = await UserModel.countDocuments();
    console.log('–•—ç—Ä—ç–≥–ª—ç–≥—á–¥–∏–π–Ω —Ç–æ–æ:', userCount);

    if (userCount === 0) {
      console.log('‚ö†Ô∏è Database –¥—ç—ç—Ä —Ö—ç—Ä—ç–≥–ª—ç–≥—á –æ–ª–¥—Å–æ–Ω–≥“Ø–π');
    } else {
      const sampleUsers = await UserModel.find({}).limit(3);
      console.log('–ñ–∏—à—ç—ç —Ö—ç—Ä—ç–≥–ª—ç–≥—á–∏–¥:', sampleUsers.map(user => ({
        _id: user._id,
        email: user.email,
        firstName: user.firstName,
        lastName: user.lastName,
        dateOfBirth: user.dateOfBirth
      })));
    }

    return {
      success: true,
      message: 'MongoDB –∑”©–≤ –∞–∂–∏–ª–ª–∞–∂ –±–∞–π–Ω–∞',
      databaseInfo: {
        name: dbName,
        host,
        port,
        collections: collections.map(col => col.name)
      },
      userCount
    };

  } catch (error) {
    console.error('‚ùå MongoDB —à–∞–ª–≥–∞–ª—Ç –∞–º–∂–∏–ª—Ç–≥“Ø–π:', error);
    return {
      success: false,
      issue: '–ê–ª–¥–∞–∞',
      message: `–ê–ª–¥–∞–∞: ${error instanceof Error ? error.message : 'Unknown error'}`,
      error: error instanceof Error ? error.message : 'Unknown error'
    };
  }
};

// –•—ç—Ä—ç–≥–ª—ç–≥—á “Ø“Ø—Å–≥—ç—Ö —Ç–µ—Å—Ç
export const testUserCreation = async () => {
  try {
    console.log('üß™ –•—ç—Ä—ç–≥–ª—ç–≥—á “Ø“Ø—Å–≥—ç—Ö —Ç–µ—Å—Ç...\n');

    // –•–æ–ª–±–æ–ª—Ç —à–∞–ª–≥–∞—Ö
    if (mongoose.connection.readyState !== 1) {
      await connectToMongoDB();
    }

    const testUser = new UserModel({
      email: 'test.mongodb@example.com',
      password: 'password123',
      role: 'user',
      firstName: 'Test',
      lastName: 'User',
      dateOfBirth: new Date('1990-01-01')
    });

    const savedUser = await testUser.save();
    console.log('‚úÖ –¢–µ—Å—Ç —Ö—ç—Ä—ç–≥–ª—ç–≥—á “Ø“Ø—Å–≥—ç–≥–¥–ª—ç—ç:', {
      _id: savedUser._id,
      email: savedUser.email,
      firstName: savedUser.firstName,
      lastName: savedUser.lastName
    });

    // –¢–µ—Å—Ç —Ö—ç—Ä—ç–≥–ª—ç–≥—á–∏–π–≥ —É—Å—Ç–≥–∞—Ö
    await UserModel.deleteOne({ _id: savedUser._id });
    console.log('–¢–µ—Å—Ç —Ö—ç—Ä—ç–≥–ª—ç–≥—á —É—Å—Ç–≥–∞–≥–¥–ª–∞–∞');

    return {
      success: true,
      message: '–•—ç—Ä—ç–≥–ª—ç–≥—á “Ø“Ø—Å–≥—ç—Ö —Ç–µ—Å—Ç –∞–º–∂–∏–ª—Ç—Ç–∞–π'
    };

  } catch (error) {
    console.error('‚ùå –•—ç—Ä—ç–≥–ª—ç–≥—á “Ø“Ø—Å–≥—ç—Ö —Ç–µ—Å—Ç –∞–º–∂–∏–ª—Ç–≥“Ø–π:', error);
    return {
      success: false,
      message: `–¢–µ—Å—Ç –∞–º–∂–∏–ª—Ç–≥“Ø–π: ${error instanceof Error ? error.message : 'Unknown error'}`
    };
  }
};

// –•—ç—Ä—ç–≥–ª—ç–≥—á —à–∏–Ω—ç—á–ª—ç—Ö —Ç–µ—Å—Ç
export const testUserUpdate = async () => {
  try {
    console.log('üîÑ –•—ç—Ä—ç–≥–ª—ç–≥—á —à–∏–Ω—ç—á–ª—ç—Ö —Ç–µ—Å—Ç...\n');

    // –•–æ–ª–±–æ–ª—Ç —à–∞–ª–≥–∞—Ö
    if (mongoose.connection.readyState !== 1) {
      await connectToMongoDB();
    }

    // –≠—Ö–ª—ç—ç–¥ —Ç–µ—Å—Ç —Ö—ç—Ä—ç–≥–ª—ç–≥—á “Ø“Ø—Å–≥—ç—Ö
    const testUser = new UserModel({
      email: 'update.test@example.com',
      password: 'password123',
      role: 'user'
    });

    const savedUser = await testUser.save();
    console.log('–¢–µ—Å—Ç —Ö—ç—Ä—ç–≥–ª—ç–≥—á “Ø“Ø—Å–≥—ç–≥–¥–ª—ç—ç:', savedUser._id);

    // –•—ç—Ä—ç–≥–ª—ç–≥—á–∏–π–≥ —à–∏–Ω—ç—á–ª—ç—Ö
    const updatedUser = await UserModel.findByIdAndUpdate(
      savedUser._id,
      { 
        $set: { 
          firstName: 'Updated',
          lastName: 'User',
          dateOfBirth: new Date('1995-05-15')
        } 
      },
      { new: true }
    );

    console.log('‚úÖ –•—ç—Ä—ç–≥–ª—ç–≥—á —à–∏–Ω—ç—á–ª—ç–≥–¥–ª—ç—ç:', {
      firstName: updatedUser?.firstName,
      lastName: updatedUser?.lastName,
      dateOfBirth: updatedUser?.dateOfBirth
    });

    // –¢–µ—Å—Ç —Ö—ç—Ä—ç–≥–ª—ç–≥—á–∏–π–≥ —É—Å—Ç–≥–∞—Ö
    await UserModel.deleteOne({ _id: savedUser._id });
    console.log('–¢–µ—Å—Ç —Ö—ç—Ä—ç–≥–ª—ç–≥—á —É—Å—Ç–≥–∞–≥–¥–ª–∞–∞');

    return {
      success: true,
      message: '–•—ç—Ä—ç–≥–ª—ç–≥—á —à–∏–Ω—ç—á–ª—ç—Ö —Ç–µ—Å—Ç –∞–º–∂–∏–ª—Ç—Ç–∞–π'
    };

  } catch (error) {
    console.error('‚ùå –•—ç—Ä—ç–≥–ª—ç–≥—á —à–∏–Ω—ç—á–ª—ç—Ö —Ç–µ—Å—Ç –∞–º–∂–∏–ª—Ç–≥“Ø–π:', error);
    return {
      success: false,
      message: `–¢–µ—Å—Ç –∞–º–∂–∏–ª—Ç–≥“Ø–π: ${error instanceof Error ? error.message : 'Unknown error'}`
    };
  }
};

// –ë“Ø—Ö —Ç–µ—Å—Ç“Ø“Ø–¥–∏–π–≥ –∞–∂–∏–ª–ª—É—É–ª–∞—Ö
export const runAllMongoDBTests = async () => {
  try {
    console.log('üöÄ –ë“Ø—Ö MongoDB —Ç–µ—Å—Ç“Ø“Ø–¥–∏–π–≥ –∞–∂–∏–ª–ª—É—É–ª–∂ –±–∞–π–Ω–∞...\n');

    const results = {
      status: await checkMongoDBStatus(),
      userCreation: await testUserCreation(),
      userUpdate: await testUserUpdate()
    };

    console.log('\n=== –¢–ï–°–¢–ò–ô–ù –î“Æ–ù ===');
    console.log(JSON.stringify(results, null, 2));

    const allSuccess = results.status.success && 
                     results.userCreation.success && 
                     results.userUpdate.success;

    if (allSuccess) {
      console.log('\n‚úÖ –ë“Ø—Ö —Ç–µ—Å—Ç“Ø“Ø–¥ –∞–º–∂–∏–ª—Ç—Ç–∞–π!');
    } else {
      console.log('\n‚ùå –ó–∞—Ä–∏–º —Ç–µ—Å—Ç“Ø“Ø–¥ –∞–º–∂–∏–ª—Ç–≥“Ø–π:');
      Object.entries(results).forEach(([test, result]) => {
        if (!result.success) {
          console.log(`- ${test}: ${result.message}`);
        }
      });
    }

    return results;

  } catch (error) {
    console.error('‚ùå –¢–µ—Å—Ç“Ø“Ø–¥ –∞–º–∂–∏–ª—Ç–≥“Ø–π:', error);
    return {
      error: error instanceof Error ? error.message : 'Unknown error'
    };
  }
};
