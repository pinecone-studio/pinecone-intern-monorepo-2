#!/usr/bin/env node

import { seedMockData, seedUsersOnly, seedHotelsOnly, getSeedingStats, clearAllData } from './mock-data-seeder';

// Parse command line arguments
const args = process.argv.slice(2);
const command = args[0];

async function main() {
  try {
    console.log('üöÄ Mock Data Seeder Script\n');

    switch (command) {
      case 'seed':
      case 'all':
        console.log('üå± –ë“Ø—Ö mock data “Ø“Ø—Å–≥—ç–∂ –±–∞–π–Ω–∞...');
        const result = await seedMockData();
        if (result.success) {
          console.log('\n‚úÖ –ê–º–∂–∏–ª—Ç—Ç–∞–π!');
          console.log('üìä –î“Ø–Ω:');
          console.log(`   üë• –•—ç—Ä—ç–≥–ª—ç–≥—á–∏–¥: ${result.summary?.users}`);
          console.log(`   üè® –ó–æ—á–∏–¥ –±—É—É–¥–ª—É—É–¥: ${result.summary?.hotels}`);
          console.log(`   üõèÔ∏è ”®—Ä”©”©–Ω“Ø“Ø–¥: ${result.summary?.rooms}`);
          console.log(`   üìÖ –ó–∞—Ö–∏–∞–ª–≥—É—É–¥: ${result.summary?.bookings}`);
        } else {
          console.log('\n‚ùå –ê–º–∂–∏–ª—Ç–≥“Ø–π:', result.message);
          process.exit(1);
        }
        break;

      case 'users':
        console.log('üë• –ó”©–≤—Ö”©–Ω —Ö—ç—Ä—ç–≥–ª—ç–≥—á–∏–¥ “Ø“Ø—Å–≥—ç–∂ –±–∞–π–Ω–∞...');
        const userResult = await seedUsersOnly();
        if (userResult.success) {
          console.log(`\n‚úÖ ${userResult.count} —Ö—ç—Ä—ç–≥–ª—ç–≥—á “Ø“Ø—Å–≥—ç–≥–¥–ª—ç—ç`);
        } else {
          console.log('\n‚ùå –ê–º–∂–∏–ª—Ç–≥“Ø–π:', userResult.error);
          process.exit(1);
        }
        break;

      case 'hotels':
        console.log('üè® –ó”©–≤—Ö”©–Ω –∑–æ—á–∏–¥ –±—É—É–¥–ª—É—É–¥ “Ø“Ø—Å–≥—ç–∂ –±–∞–π–Ω–∞...');
        const hotelResult = await seedHotelsOnly();
        if (hotelResult.success) {
          console.log(`\n‚úÖ ${hotelResult.count} –∑–æ—á–∏–¥ –±—É—É–¥–∞–ª “Ø“Ø—Å–≥—ç–≥–¥–ª—ç—ç`);
        } else {
          console.log('\n‚ùå –ê–º–∂–∏–ª—Ç–≥“Ø–π:', hotelResult.error);
          process.exit(1);
        }
        break;

      case 'stats':
        console.log('üìä ”®–≥”©–≥–¥–ª–∏–π–Ω —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫...');
        const stats = await getSeedingStats();
        if (stats) {
          console.log('\nüìà –û–¥–æ–æ–≥–∏–π–Ω ”©–≥”©–≥–¥”©–ª:');
          console.log(`   üë• –•—ç—Ä—ç–≥–ª—ç–≥—á–∏–¥: ${stats.users}`);
          console.log(`   üè® –ó–æ—á–∏–¥ –±—É—É–¥–ª—É—É–¥: ${stats.hotels}`);
          console.log(`   üõèÔ∏è ”®—Ä”©”©–Ω“Ø“Ø–¥: ${stats.rooms}`);
          console.log(`   üìÖ –ó–∞—Ö–∏–∞–ª–≥—É—É–¥: ${stats.bookings}`);
        } else {
          console.log('\n‚ùå –°—Ç–∞—Ç–∏—Å—Ç–∏–∫ –∞–≤–∞—Ö –∞–º–∂–∏–ª—Ç–≥“Ø–π');
          process.exit(1);
        }
        break;

      case 'clear':
        console.log('üßπ –ë“Ø—Ö ”©–≥”©–≥–¥–ª–∏–π–≥ —É—Å—Ç–≥–∞–∂ –±–∞–π–Ω–∞...');
        const clearResult = await clearAllData();
        if (clearResult.success) {
          console.log('\n‚úÖ –ë“Ø—Ö ”©–≥”©–≥–¥”©–ª —É—Å—Ç–≥–∞–≥–¥–ª–∞–∞');
        } else {
          console.log('\n‚ùå –ê–º–∂–∏–ª—Ç–≥“Ø–π:', clearResult.error);
          process.exit(1);
        }
        break;

      case 'help':
      case '--help':
      case '-h':
        showHelp();
        break;

      default:
        console.log('‚ùå –ë—É—Ä—É—É –∫–æ–º–∞–Ω–¥–∞');
        showHelp();
        process.exit(1);
    }

  } catch (error) {
    console.error('‚ùå –ê–ª–¥–∞–∞:', error);
    process.exit(1);
  }
}

function showHelp() {
  console.log(`
üìñ Mock Data Seeder - –¢—É—Å–ª–∞–º–∂

–•—ç—Ä—ç–≥–ª—ç—ç:
  npm run seed [–∫–æ–º–∞–Ω–¥–∞]

–ö–æ–º–∞–Ω–¥—É—É–¥:
  seed, all     - –ë“Ø—Ö mock data “Ø“Ø—Å–≥—ç—Ö (—Ö—ç—Ä—ç–≥–ª—ç–≥—á–∏–¥, –∑–æ—á–∏–¥ –±—É—É–¥–ª—É—É–¥, ”©—Ä”©”©–Ω“Ø“Ø–¥, –∑–∞—Ö–∏–∞–ª–≥—É—É–¥)
  users         - –ó”©–≤—Ö”©–Ω —Ö—ç—Ä—ç–≥–ª—ç–≥—á–∏–¥ “Ø“Ø—Å–≥—ç—Ö
  hotels        - –ó”©–≤—Ö”©–Ω –∑–æ—á–∏–¥ –±—É—É–¥–ª—É—É–¥ “Ø“Ø—Å–≥—ç—Ö
  stats         - –û–¥–æ–æ–≥–∏–π–Ω ”©–≥”©–≥–¥–ª–∏–π–Ω —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫ —Ö–∞—Ä—É—É–ª–∞—Ö
  clear         - –ë“Ø—Ö ”©–≥”©–≥–¥–ª–∏–π–≥ —É—Å—Ç–≥–∞—Ö
  help          - –≠–Ω—ç —Ç—É—Å–ª–∞–º–∂–∏–π–≥ —Ö–∞—Ä—É—É–ª–∞—Ö

–ñ–∏—à—ç—ç:
  npm run seed all
  npm run seed users
  npm run seed stats
  npm run seed clear

‚ö†Ô∏è  –ê–Ω—Ö–∞–∞—Ä—É—É–ª–≥–∞: –≠–Ω—ç —Å–∫—Ä–∏–ø—Ç –Ω—å –æ–¥–æ–æ–≥–∏–π–Ω ”©–≥”©–≥–¥–ª–∏–π–≥ —É—Å—Ç–≥–∞–∂, —à–∏–Ω—ç mock data “Ø“Ø—Å–≥—ç–Ω—ç.
`);
}

// Run the script
main();




