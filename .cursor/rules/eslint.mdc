---
description: ESLint standards, naming, and module-boundary rules across the monorepo
globs: .eslintrc.json, **/.eslintrc.json, **/eslint.config.*, **/.eslintrc.*
alwaysApply: true
---

- **Central config and plugins**

  - Root config: [root .eslintrc.json](mdc:.eslintrc.json)
  - Key plugins: `@nx`, `@typescript-eslint`, `eslint-plugin-unicorn`, `no-secrets`, `promise`
  - JSON files use `jsonc-eslint-parser`
  - Example app configs may extend Next/Cypress and Nx React TS: see [assets-management-dash](mdc:apps/operational/assets-management-dash/.eslintrc.json)

- **React component and page file naming (unicorn/filename-case)**

  - **Components (`*.tsx`, `*.jsx`)**: PascalCase filenames
    - ✅ `MyCard.tsx` ❌ `my-card.tsx`
  - **Next.js pages and app route files**: kebab-case filenames
    - Files like `pages/**/*.tsx`, `app/**/{page,layout,template,loading,error,global-error,not-found}.tsx` must be kebab-case
    - ✅ `user-profile.tsx` ❌ `UserProfile.tsx`
  - **React hooks files**: camelCase pattern `use[A-Z]*.(ts|js)`
    - ✅ `useUser.ts` ❌ `use-user.ts`
  - Test/spec and React Native exceptions are allowed per root config
  - Source: see naming overrides in [root .eslintrc.json](mdc:.eslintrc.json)

- **No inline patterns in JSX**

  - `@nx/workspace/jsx-no-inline-function`: error for `*.tsx`, `*.jsx`
  - `@nx/workspace/jsx-no-inline-types`: error for `*.tsx`, `*.jsx`

- **Environment keys naming**

  - `@nx/workspace/environment-key-naming-convention`: error for files accessing `process.env`

- **Complexity and size limits**

  - `complexity`: max 3 for `*.ts`, `*.tsx`
  - `max-lines`: error at 160
  - `max-nested-callbacks`: max 3
  - `max-depth`: max 4
  - `no-unused-vars`: error; allow unused args prefixed with `_`

- **Security and quality**

  - `no-secrets/no-secrets`: error (detects hardcoded secrets)
  - `no-magic-numbers`: off (with sensible defaults)

- **Module boundaries (Nx)**

  - `@nx/enforce-module-boundaries`: error by default
  - Tag rules enforced in TypeScript files:
    - **type rules**: `type:app` → `type:feature|data-access|util|ui`; `type:feature` → `type:feature|data-access|util|ui`; `type:data-access` → `type:data-access|util`; `type:ui` → `type:ui|util`; `type:util` → `type:util`
    - **plugin rules**: `plugin:next` → `plugin:next|react|node|js`; `plugin:expo` → `plugin:expo|react|js`; `plugin:react` → `plugin:react|js`; `plugin:express` → `plugin:express|js`; `plugin:nest` → `plugin:nest|js`
    - **scope rules**: `scope:shared` → `scope:shared`; app-specific scopes as defined in root config
  - Local overrides may disable/enhance rules per project when justified (e.g., [libs/auth](mdc:libs/auth/.eslintrc.json))
  - Full configuration in [root .eslintrc.json](mdc:.eslintrc.json)

- **Framework-specific extends**

  - Next.js apps generally extend `next` and `next/core-web-vitals`; `@next/next/no-html-link-for-pages` may be disabled where appropriate
  - Cypress: `plugin:cypress/recommended` for e2e; Jest env enabled in `*.spec.*`
  - Examples: [assets-management-dash](mdc:apps/operational/assets-management-dash/.eslintrc.json), [enterprise-notification](mdc:apps/enterprise-notification/.eslintrc.json)

- **Restricted imports (UI and utilities)**

  - Some Next apps disallow specific libraries via `no-restricted-imports` in favor of our standards:
    - Disallowed: `@mui/*`, `@emotion/*`, `@pinecone-studio/cedar*`, `mui-one-time-password-input` → use `shadcn/ui` + `tailwind`
    - Disallowed: `moment`, `dayjs` → use `date-fns`
    - Disallowed: `react-icons`, `@mui/icons-material` → use `lucide-react`
    - Disallowed: `react-toastify`, `react-hot-toast` → use `sonner`
    - Disallowed: `formik` → use `react-hook-form`
  - See example in [assets-management-dash .eslintrc](mdc:apps/operational/assets-management-dash/.eslintrc.json)

- **JSON and tooling files**

  - `*.json` parsed with `jsonc-eslint-parser`; Nx JSON-specific rules applied in tooling packages (e.g., [workspace-plugin](mdc:tools/workspace-plugin/.eslintrc.json), [shared/cron-job](mdc:libs/shared/cron-job/.eslintrc.json))

- **Code examples**

  ```typescript
  // ✅ Component filename (PascalCase)
  export const UserCard = () => <div />;
  ```

  ```typescript
  // ✅ Hook filename (camelCase starting with use)
  export const useUser = () => ({
    /* ... */
  });
  ```

  ```typescript
  // ✅ Next page filename (kebab-case): pages/user-profile.tsx
  const Page = () => <div />;
  export default Page;
  ```

- **Maintenance**
  - Keep this rule in sync with [root .eslintrc.json](mdc:.eslintrc.json)
  - When adding new tag scopes or changing boundaries, update the lists above and add references to example configs
  - Prefer updating shared/root config over duplicating rules in leaf projects